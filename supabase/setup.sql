-- Create profiles table
CREATE TABLE IF NOT EXISTS profiles (
  id uuid REFERENCES auth.users(id) PRIMARY KEY,
  name text,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Enable RLS for profiles table
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;

-- Create profiles policies
DROP POLICY IF EXISTS "Enable read access for all profiles" ON profiles;
DROP POLICY IF EXISTS "Enable update own profile" ON profiles;
DROP POLICY IF EXISTS "Enable insert own profile" ON profiles;

-- Policy for reading profiles (all authenticated users can read)
CREATE POLICY "Enable read access for all profiles"
  ON profiles FOR SELECT
  TO authenticated
  USING (true);

-- Policy for inserting profiles (users can only insert their own)
CREATE POLICY "Enable insert own profile"
  ON profiles FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = id);

-- Policy for updating profiles (users can only update their own)
CREATE POLICY "Enable update own profile"
  ON profiles FOR UPDATE
  TO authenticated
  USING (auth.uid() = id)
  WITH CHECK (auth.uid() = id);

-- Create trigger to handle updated_at
CREATE OR REPLACE FUNCTION handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS update_profiles_updated_at ON profiles;
CREATE TRIGGER update_profiles_updated_at
  BEFORE UPDATE ON profiles
  FOR EACH ROW
  EXECUTE FUNCTION handle_updated_at();

-- Create items table
CREATE TABLE IF NOT EXISTS items (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name text NOT NULL,
  total_count integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Enable RLS for items table
ALTER TABLE items ENABLE ROW LEVEL SECURITY;

-- Create users_items table for tracking user commitments
CREATE TABLE IF NOT EXISTS users_items (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid REFERENCES auth.users(id) NOT NULL,
  item_id bigint REFERENCES items(id) NOT NULL,
  count integer NOT NULL,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
  UNIQUE(user_id, item_id)
);

-- Enable RLS for users_items table
ALTER TABLE users_items ENABLE ROW LEVEL SECURITY;

-- Create stored procedure for incrementing item counts
CREATE OR REPLACE FUNCTION increment_item_count(p_item_id bigint, p_count int)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  UPDATE items
  SET total_count = total_count + p_count
  WHERE id = p_item_id;
END;
$$;

-- Drop existing policies if they exist
DROP POLICY IF EXISTS "Enable read access for all users" ON items;
DROP POLICY IF EXISTS "Enable read access for own items" ON users_items;
DROP POLICY IF EXISTS "Enable insert access for own items" ON users_items;
DROP POLICY IF EXISTS "Enable update access for own items" ON users_items;

-- Create RLS policies
-- Items table policies
CREATE POLICY "Enable read access for all users"
  ON items FOR SELECT
  TO authenticated
  USING (true);

-- Users_items table policies
CREATE POLICY "Enable read access for own items"
  ON users_items FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Enable insert access for own items"
  ON users_items FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Enable update access for own items"
  ON users_items FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

-- Insert sample items (only if they don't exist)
INSERT INTO items (name)
SELECT unnest(ARRAY[
  'Chips',
  'Salsa',
  'Guacamole',
  'Beer',
  'Wine',
  'Soda',
  'Ice',
  'Paper plates',
  'Plastic cups',
  'Napkins'
])
WHERE NOT EXISTS (SELECT 1 FROM items LIMIT 1);
